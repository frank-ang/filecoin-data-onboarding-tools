AWSTemplateFormatVersion: '2010-09-09'

Description: Singularity EC2 Appliance.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VPC
          - AZ
          - SubnetId
          - SecurityGroup
      - 
        Label: 
          default: "Amazon EC2 Configuration"
        Parameters: 
          - InstanceType
          - InstanceProfile
          - KeyPair
          - LatestUbuntuFocalAMI

    ParameterLabels: 
      VPC: 
        default: "Which VPC ID should singularity be deployed to?"

Parameters: 

  VPC:
    Description: VPC ID.
    Type: AWS::EC2::VPC::Id
    Default: vpc-0b66bf645342935b5
    # Hardcoded

  AZ:
    Description: Availability Zone placement
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-southeast-1a
    # Hardcoded

  SubnetId:
    Description: Subnet ID placement
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0728cf0c3c454fff1
    # Hardcoded

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID
    Default: sg-06788998bef10dbb7
    # Hardcoded

  KeyPair:
    Description: Key Pair Name
    Type: AWS::EC2::KeyPair::KeyName
    Default: mac2021
    # Hardcoded

  InstanceProfile:
    Description: EC2 Instance Profile ARN
    Type: String
    Default: mySSMManagedInstance
    # Hardcoded

  LatestUbuntuFocalAMI:
    Description: Ubuntu AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id

  InstanceType:
    Description: EC2 Instance Type
    Type: String
    # Season to taste
    Default: r5.2xlarge
    AllowedValues:
      - c5.2xlarge
      - c5.4xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge

Resources:

  SingularityInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
      - !Ref SecurityGroup
      KeyName: !Ref KeyPair
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Ref AZ
      # ImageId: !Ref LatestUbuntuFocalAMI
      ImageId: ami-0d9ef727e078d42a4 # hardcoded to tools baked into AMI. TODO improve this...
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 50 # season to taste
      Tags:
        - Key: Name
          Value: filecoin-client-tools
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          function my_trap() {
            echo "UserData was unsuccessful!"
            echo "ERROR while executing User Data. "
            echo "Scheduling shutdown..." && shutdown -h +60
            echo "Sending CloudFormation error signal"
            ## TODO do not signal fail. Preserve failed instance for debugging.
            ## /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource SingularityInstance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --success true --stack ${AWS::StackName} --resource SingularityInstance --region ${AWS::Region}
          }
          trap 'my_trap' ERR

          export HOME=/root
          cd $HOME
          
          #### commented out for baked-AMI test. TODO restore.
          #apt update
          #apt install -y unzip
          #echo "## Installing AWS dependencies..."
          #cd $HOME
          #wget --no-verbose -O /tmp/aws-cfn-bootstrap-py3-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          #python3 -m easy_install --script-dir /opt/aws/bin /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
          #echo "## Installing AWS CLI v2..."
          #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          #unzip -q awscliv2.zip
          #./aws/install
          #echo "## AWS dependencies installed."

          echo "## Downloading Repo"
          cd $HOME
          rm -rf ./filecoin-data-onboarding-tools
          git clone https://github.com/frank-ang/filecoin-data-onboarding-tools.git
          cd ./filecoin-data-onboarding-tools && git fetch  && git switch test

          #### commented out for baked-AMI test. TODO restore.
          #echo "## Installing Ubuntu prereqs required by Filecoin client tools."
          #cd $HOME/filecoin-data-onboarding-tools/aws/
          #./filecoin-ubuntu-prereqs.sh run >> /var/log/filecoin-ubuntu-prereqs.log 2>&1

          echo "## Setting up Filecoin client tools (background)..."
          cd $HOME/filecoin-data-onboarding-tools/lotus
          nohup ./filecoin-tools-setup.sh run >> /var/log/filecoin-tools-setup.log 2>&1 &

          # All done, signal success.
          echo "## Signaling successful to CloudFormation."
          /opt/aws/bin/cfn-signal --success true --stack ${AWS::StackName} --resource SingularityInstance --region ${AWS::Region}
          echo "EC2 instance inititalization COMPLETE"

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

Outputs:
  InstanceId:
    Description: InstanceId of the singularity EC2 instance
    Value:
      Ref: SingularityInstance
  PublicIP:
    Description: Public IP address of the singularity EC2 instance
    Value:
      Fn::GetAtt:
      - SingularityInstance
      - PublicIp
